/// This file was generated on 2021-11-18T13:57:09.708556


import '../../pco.dart';

/// This class represents a PCO Services BlockoutDate Object
/// 
/// Application: services
/// Id:          blockout_date
/// Type:        BlockoutDate
/// ApiVersion:  2018-11-01
/// 
/// Description:
/// The actual dates generated by the blockout or its recurrence pattern. Generated up to a year in advance
/// 
/// Example:
/// 
/// {"type":"BlockoutDate","id":"1","attributes":{"group_identifier":"string","reason":"string","time_zone":"string","share":true,"starts_at":"2000-01-01T12:00:00Z","ends_at":"2000-01-01T12:00:00Z","ends_at_utc":"2000-01-01T12:00:00Z","starts_at_utc":"2000-01-01T12:00:00Z"},"relationships":{"person":{"data":{"type":"Person","id":"1"}},"blockout":{"data":{"type":"Blockout","id":"1"}}}}
/// 
/// Collection Only: false
/// 
/// Deprecated: false
/// 
/// Default Endpoint: https://api.planningcenteronline.com/services/v2/people/1/blockout_dates
/// 
class PcoServicesBlockoutDate extends PcoResource {
  static const String pcoApplication = 'services';
  static const String typeString = 'BlockoutDate';
  static const String typeId = 'blockout_date';
  static const String apiVersion = '2018-11-01';
  static const String shortestEdgeId = '';
  static const String shortestEdgePathTemplate = 'https://api.planningcenteronline.com/services/v2/people/1/blockout_dates';

  @override
  String shortestEdgePath() => shortestEdgePathTemplate;

  // field mapping constants
  static const kGroupIdentifier = 'group_identifier';
  static const kReason = 'reason';
  static const kTimeZone = 'time_zone';
  static const kShare = 'share';
  static const kStartsAt = 'starts_at';
  static const kEndsAt = 'ends_at';
  static const kEndsAtUtc = 'ends_at_utc';
  static const kStartsAtUtc = 'starts_at_utc';


  // getters and setters
  @override
  List<String> get createAllowed => [];
  @override
  List<String> get updateAllowed => [];

  String get groupIdentifier => attributes[kGroupIdentifier] ?? '';
  String get reason => attributes[kReason] ?? '';
  String get timeZone => attributes[kTimeZone] ?? '';
  bool get isShare => attributes[kShare] == true;

  /// Start time as a 'wall-clock' timestamp
  DateTime get startsAt => DateTime.parse(attributes[kStartsAt] ?? '');

  /// End time as a 'wall-clock' timestamp
  DateTime get endsAt => DateTime.parse(attributes[kEndsAt] ?? '');
  DateTime get endsAtUtc => DateTime.parse(attributes[kEndsAtUtc] ?? '');
  DateTime get startsAtUtc => DateTime.parse(attributes[kStartsAtUtc] ?? '');




  PcoServicesBlockoutDate() : super(pcoApplication, typeString);
  PcoServicesBlockoutDate.fromJson(Map<String, dynamic> data): super.fromJson(pcoApplication, typeString, data);

  /// will get many PcoServicesBlockoutDate Objects
  /// using a path like this: https://api.planningcenteronline.com/services/v2/people/1/blockouts/1/blockout_dates;
  static Future<List<PcoServicesBlockoutDate>> getManyFromPeopleAndBlockoutAndBlockoutDateIds(String peopleId,String blockoutId, {PlanningCenterApiQuery? query}) async {
    List<PcoServicesBlockoutDate> retval = [];
    query ??= PlanningCenterApiQuery();
    var url = '/services/v2/people/$peopleId/blockouts/$blockoutId/blockout_dates';
    var res = await PlanningCenter.instance.call(url, query: query, apiVersion:apiVersion);
    if (res.isError) return retval;

    if (res.data is List) {
      for (var itemData in res.data) {
        retval.add(PcoServicesBlockoutDate.fromJson(itemData));
      }
    }
    return retval;
  }


  /// will get a single PcoServicesBlockoutDate Object
  /// using a path like this: https://api.planningcenteronline.com/services/v2/people/1/blockouts/1/blockout_dates;
  static Future<PcoServicesBlockoutDate?> getSingleFromPeopleAndBlockoutAndBlockoutDateIds(String peopleId,String blockoutId, String id, {PlanningCenterApiQuery? query}) async {
    PcoServicesBlockoutDate?  retval;
    query ??= PlanningCenterApiQuery();
    var url = '/services/v2/people/$peopleId/blockouts/$blockoutId/blockout_dates' + '/$id';
    var res = await PlanningCenter.instance.call(url, query: query, apiVersion:apiVersion);
    if (res.isError) return retval;

    if (res.data is! List) {
      retval = PcoServicesBlockoutDate.fromJson(res.data);
    }
    return retval;
  }




}
