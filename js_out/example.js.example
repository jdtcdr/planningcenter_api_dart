import { PlanningCenter, PlanningCenterCredentials, PlanningCenterApiQuery, PcoPeoplePerson } from './src/pco.js';
import fs from 'fs';


const appid = '--yours here--';
const secret = '--yours here--';
const credentialsFile = '--yours here--';

function debug( s ) {
	if ( typeof s == 'string' ) console.log( s );
	else console.dir( s, { depth: 10 } );
}

async function main() {
	// debug( 'checking credentials' );
	// if ( fs.existsSync( credentialsFile ) ) {
	// 	debug( 'authenticating with saved credentials' );
	// 	var credentials = JSON.parse( fs.readFileSync( credentialsFile ) );
	// 	var creds = PlanningCenterCredentials.fromJson( credentials );
	// 	PlanningCenter.initWithCredentials( oAuthClientId, oAuthClientSecret, creds );
	// }

	// /// TODO: refactor authorize so that it manages its own http server
	// /// unless the user supplies their own
	// if ( !PlanningCenter.initialized ) {
	// 	// debug( 'initiating oAuth workflow' );
	// 	// var authorized = await PlanningCenter.authorize(
	// 	// 	oAuthClientId,
	// 	// 	oAuthClientSecret,
	// 	// 	'http://localhost:64738/pco_callback',
	// 	// 	PlanningCenter.oAuthScopes,
	// 	// 	authRedirector,
	// 	// );
	// 	if ( !PlanningCenter.initialized ) {
	// 		debug( 'Planning Center authentication failed.' );
	// 		process.exit();
	// 	}
	// }

	// debug( PlanningCenter.instance.oAuthCredentials );

	PlanningCenter.init( appid, secret );
	var collection = await PcoPeoplePerson.get( { id: '29166364', allIncludes: false } );
	if ( collection.isError ) {
		debug( collection );
		debug( collection.query.asMap );
		debug( collection.response.responseBody );
	}

	debug( collection );
	var result = collection.data[ 0 ];

	debug( '\nRESULT:' );
	debug( result );
	debug( '\nLINKS:' );
	debug( result.links );
	debug( '\nRELATIONSHIPS:' );
	debug( result.relationships );
	// result.relationships.forEach((key, relationships) {
	//   debug('$key - ${relationships.length} relationships');
	//   for (var relationship in relationships) {
	//     debug(relationship.toJson());
	//   }
	// });

	// Once we're done with the client, save the credentials file. This ensures
	// that if the credentials were automatically refreshed while using the
	// client, the new credentials are available for the next run of the
	// program.
	// await credentialsFile.create( recursive: true );
	// await credentialsFile.writeAsString( JSON.stringify( PlanningCenter.instance.oAuthCredentials ) );
}

main();
